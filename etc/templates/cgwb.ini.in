# CGWB WSGI CONFIGURATION FILE
# You can just copy/edit and use with paster serve <file> instead of the ./cgwb shortlink

[DEFAULT]
url_test = false
debug = ${parts.settings.debug}

[composite:main]
use = egg:Paste#urlmap
/= pwebbuilder
/cgwb/ = pwebbuilder
/static/ = pstatic

[pipeline:pwebbuilder]
pipeline = vhm
           egg:Paste#cgitb
	   translogger
           egg:Paste#evalerror
           webbuilderapp
[pipeline:pstatic]
pipeline = vhm
	   translogger
           static

[filter:vhm]
use= egg:repoze.vhm#vhm_xheaders

[filter:translogger]
use=egg:Paste#translogger
setup_console_handler = False
logger_name = wsgi

[app:webbuilderapp]
use = egg:collective.generic.webbuilder#cgwb_app
# alternative zcml to load on startup
# this is a good place for adding some new paster configurations
# to cgwb
zcmls=
      plone40_addon.zcml
      plone41_addon.zcml
      plone42_addon.zcml
      plone41.zcml
      plone4.zcml
      plone3.zcml
      django.zcml
      pyramid.zcml
      plone-addon.zcml
      egg.zcml
[app:static]
#use = egg:Paste#static
#document_root = %(here)s/templates/static
use = egg:Paste#pkg_resources
egg = collective.generic.webbuilder
resource_name=collective/generic/webbuilder/templates/static


[loggers]
keys = root,wsgi,routes

[handlers]
keys = fconsole,console,accesslog,errorlog

[formatters]
keys = generic,accesslog

# Send warnings that are not caught by other loggers to the console
[logger_root]
level = NOTSET
handlers = console,fconsole

# Send all messages to the 'wsgi' logger to the accesslog and errorlog handlers
[logger_wsgi]
level = NOTSET
handlers = accesslog,errorlog,console,fconsole
qualname = wsgi
propagate = 0

# Routes (the URL dispatcher) sends debug information to the 'routes.middleware' logger
# with DEBUG level.
[logger_routes]
level = NOTSET
handlers = console,fconsole
qualname = routes.middleware
propagate = 0

# Handler for printing messages to the console
[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = INFO
formatter = generic

# Handler for writing access.log style log lines to an "access.log" file
[handler_fconsole]
class = FileHandler
args = ('${parts.buildout.directory}/var/log/console.log','a')
level = INFO
formatter = generic

# Handler for writing access.log style log lines to an "access.log" file
[handler_accesslog]
class = FileHandler
args = ('${parts.buildout.directory}/var/log/access.log','a')
level = INFO
formatter = accesslog

# Handler for writing error messages to an "error.log" file
[handler_errorlog]
class = FileHandler
args = ('${parts.buildout.directory}/var/log/error.log','a')
level = WARNING
formatter = generic

# A generic formatter that prints the time, the logger's name, the level and the message
[formatter_generic]
format = %(asctime)s %(name)s[%(levelname)s] %(message)s

# A trivial formatter that just passes-through the log message.
# Translogger already creates Apache-style log messages. No need to change that.
[formatter_accesslog]
format = %(message)s

[server:main]
use=egg:Paste#http
host=${parts.hosts.cgwb}
port=${parts.ports.cgwb}
# vim:set ft=cfg:
